name: CI

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - 'lab-**'
  pull_request:
    branches:
      - main
      - 'lab-**'

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  PROJECT_NAME: csc

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  style:
    # Checks the code style
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: sudo apt install clang-format
      
      # Checks for code to follow LLVM format using clang-format
      - name: Check code style
        run: find src/ tests/ -regex '.*\.\(cpp\|hpp\)' -exec clang-format -style=file -i {} \; && git diff --exit-code

  build-linux:
    # Making on a Linux distribution
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - cc: clang
            cxx: clang++
          - cc: gcc
            cxx: g++

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt install ninja-build clang-tidy

      # Some projects don't allow in-source building, so create a separate build directory
      - name: Create Build Environment
        run: |
          mkdir ${{runner.workspace}}/build_test

      # Use a bash shell for rgw same syntax regardless of the host OS
      - name: Configure CMake
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        working-directory: ${{runner.workspace}}/build_test
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -GNinja

      # Exports CC and CXX to tell CMake which compiler to use; runs CMake
      - name: Build CMake
        working-directory: ${{runner.workspace}}/build_test
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      # Launches testing executable
      - name: Run GTest executable
        working-directory: ${{runner.workspace}}/build_test/tests
        shell: bash
        run: ./${{ env.PROJECT_NAME }}_test